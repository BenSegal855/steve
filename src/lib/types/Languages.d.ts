import { ModerationCase } from '@lib/structures/ModerationCases';

declare module 'klasa' {
	export interface LanguageKeys {
		default: (key: string) => string;
		defaultLanguage: string;
		prefixReminder: (prefix: string) => string;
		settingGatewayExpectsGuild: string;
		settingGatewayValueForKeyNoext: (data: any, key: any) => string;
		settingGatewayValueForKeyAlrext: (data: any, key: any) => string;
		settingGatewaySpecifyValue: string;
		settingGatewayKeyNotArray: (key: any) => string;
		settingGatewayKeyNoext: (key: any) => string;
		settingGatewayInvalidType: string;
		settingGatewayInvalidFilteredValue: (piece: any, value: any) => string;
		resolverMultiTooFew: (name: string, min: number) => string;
		resolverInvalidBool: (name: string) => string;
		resolverInvalidChannel: (name: string) => string;
		resolverInvalidCustom: (name: string, type: string) => string;
		resolverInvalidDate: (name: string) => string;
		resolverInvalidDuration: (name: string) => string;
		resolverInvalidEmoji: (name: string) => string;
		resolverInvalidFloat: (name: number) => string;
		resolverInvalidGuild: (name: string) => string;
		resolverInvalidInt: (name: number) => string;
		resolverInvalidLiteral: (name: string) => string;
		resolverInvalidMember: (name: string) => string;
		resolverInvalidMessage: (name: string) => string;
		resolverInvalidPiece: (name: string, piece: string) => string;
		resolverInvalidRegexMatch: (name: string, pattern: string) => string;
		resolverInvalidRole: (name: string) => string;
		resolverInvalidString: (name: string) => string;
		resolverInvalidTime: (name: string) => string;
		resolverInvalidUrl: (name: string) => string;
		resolverInvalidUser: (name: string) => string;
		resolverStringSuffix: string;
		resolverMinmaxExactly: (name: string, min: number, suffix: string) => string;
		resolverMinmaxBoth: (name: string, min: number, max: number, suffix: string) => string;
		resolverMinmaxMin: (name: string, min: number, suffix: string) => string;
		resolverMinmaxMax: (name: string, max: number, suffix: string) => string;
		reactionhandlerPrompt: string;
		commandmessageMissing: string;
		commandmessageMissingRequired: (name: string) => string;
		commandmessageMissingOptionals: (possibles: string) => string;
		commandmessageNomatch: (possibles: string) => string;
		monitorCommandHandlerReprompt: (tag: string, name: string, time: number, abortOptions: string[]) => string;
		monitorCommandHandlerRepeatingReprompt: (tag: string, name: string, time: number, cancelOptions: string[]) => string;
		monitorCommandHandlerAborted: string;
		inhibitorCooldown: (remainng: number, guildCooldown: boolean) => string;
		inhibitorDisabledGuild: string;
		inhibitorDisabledGlobal: string;
		inhibitorMissingBotPerms: (missing: string) => string;
		inhibitorNsfw: string;
		inhibitorPermissions: string;
		inhibitorRequiredSettings: (settings: string[]) => string;
		inhibitorRunin: (types: string) => string;
		inhibitorRuninNone: (name: string) => string;
		commandBlacklistDescription: string;
		commandBlacklistSuccess: (usersAdded: string[], usersRemoved: string[], guildsAdded: string[], guildsRemoved: string[]) => string;
		commandEvalDescription: string;
		commandEvalExtendedhelp: string;
		commandEvalError: (time: string, output: string, type: string) => string;
		commandEvalOutput: (time: string, output: string, type: string) => string;
		commandEvalSendfile: (time: string, type: string) => string;
		commandEvalSendconsole: (time: string, type: string) => string;
		commandUnload: (type: string, name: string) => string;
		commandUnloadDescription: string;
		commandUnloadWarn: string;
		commandTransferError: string;
		commandTransferSuccess: (type: string, name: string) => string;
		commandTransferFailed: (type: string, name: string) => string;
		commandTransferDescription: string;
		commandReload: (type: string, name: string, time: string) => string;
		commandReloadFailed: (type: string, name: string) => string;
		commandReloadAll: (type: string, time: string) => string;
		commandReloadEverything: (time: string) => string;
		commandReloadDescription: string;
		commandReboot: string;
		commandRebootDescription: string;
		commandLoad: (time: string, type: string, name: string) => string;
		commandLoadFail: string;
		commandLoadError: (type: string, name: string, error: string) => string;
		commandLoadDescription: string;
		commandPing: string;
		commandPingDescription: string;
		commandPingpong: (diff: number, ping: number) => string;
		commandInvite: () => string[];
		commandInviteDescription: string;
		commandInfo: string[];
		commandInfoDescription: string;
		commandHelpDescription: string;
		commandHelpData: {
			title: (description: string) => string;
			usage: (usage: string) => string;
			extended: (extendedHelp: string) => string;
			footer: (name: string) => string;
		};
		commandHelpBeginning: (prefix: string) => string;
		commandHelpNoExtended: string;
		commandHelpDm: string;
		commandHelpNodm: string;
		commandHelpUsage: (usage: string) => string;
		commandHelpExtended: string;
		commandEnable: (type: string, name: string) => string;
		commandEnableDescription: string;
		commandDisable: (type: string, name: string) => string;
		commandDisableDescription: string;
		commandDisableWarn: string;
		commandConfNokey: string;
		commandConfNovalue: string;
		commandConfGuarded: (name: string) => string;
		commandConfUpdated: (key: string, response: string) => string;
		commandConfKeyNotArray: string;
		commandConfGetNoext: (key: string) => string;
		commandConfGet: (key: string, value: string) => string;
		commandConfReset: (key: string, response: string) => string;
		commandConfNochange: (key: string) => string;
		commandConfServerDescription: string;
		commandConfServerExtended: string;
		commandConfServer: (key: string, list: string) => string;
		commandConfUserDescription: string;
		commandConfUserExtended: string;
		commandConfUser: (key: string, list: string) => string;
		commandStats: (memUsage: number, uptime: string, users: number, guilds: number, channels: number, klasaVersion: string, discordVersion: string, processVersion: string) => string[];
		commandStatsDescription: string;
		commandStatsExtended: string;
		commandStatsEmbed: {
			fieldTitles: {
				memoryUsage: string;
				uptime: string;
				users: string;
				guilds: string;
				channels: string;
				klasa: string;
				discordjs: string;
				node: string;
			};
			footer: string;
			title: string;
		};
		commandDiscordStatusDescription: string;
		commandDiscordStatusError: string;
		commandDiscordStautsEmbed: {
			decription: (incident: string) => string;
			footer: (time: string) => string;
		};
		messagePromptTimeout: string;
		textPromptAbortOptions: string[];
		userNotInGuild: (user: string) => string;
		none: string;
		noParentCategory: string;
		working: string;
		argumentRolenameCouldnotfind: (name: string, arg: string) => string;
		argumentRolenameMultiplematches: (matches: string, name: string) => string;
		argumentTimespanInvalid: (arg: string) => string;
		argumentUsernameCannotfind: (search: string) => string;
		argumentUsernameMultiple: (users: string) => string;
		commandLyricsDescription: string;
		commandLyricsExtended: string;
		commandLyricsEmbed: {
			title: string;
		};
		commandLyricsNolyrics: string;
		commandChooseDescription: string;
		commandChooseExtended: string;
		commandChooseResponse: (choice: string) => string;
		commandChooseToofew: string;
		commandRateDescription: string;
		commandRateExtended: string;
		commandRateResponse: (thing: string, rating: number) => string;
		commandRockpaperscissorsDescription: string;
		commandRockpaperscissorsExtended: string;
		commandRockpaperscissorsWinner: (playerMove: string, steveMove: string, winner: number) => string;
		commandRollDescription: string;
		commandRollExtended: string;
		commandRollResponse: string;
		commandRollEmojiResponse: (emoji: string, message: string) => string;
		commandAudinoDescription: string;
		commandAudinoExtended: string;
		commandAudinoId: string;
		commandFDescription: string;
		commandFExtended: string;
		commandFId: string;
		command_8BallDescription: string;
		command_8BallExtended: string;
		command_8BallResponses: string[];
		commandDftbaDescription: string;
		commandDftbaExtended: string;
		commandXkcdDescription: string;
		commandXkcdExtended: string;
		commandXkcdInvalid: string;
		moderationNoduration: string;
		moderationNoreason: string;
		moderationNosteve: string;
		moderationNoself: string;
		moderationHigherrole: (user: string) => string;
		moderationCaseDisplayFieldTarget: string;
		moderationCaseDisplayFieldModerator: string;
		moderationCaseDisplayFieldDuration: string;
		moderationCaseDisplayFieldReason: string;
		moderationCaseDisplayFooter: (caseNumber: number, targetID: string) => string;
		moderationCaseDisplayTimeRemaining: (time: string) => string;
		commandMuteDescription: string;
		commandMuteExtended: string;
		commandMuteSuccess: (target: string, thisCase: ModerationCase) => string;
		commandMuteUnable: (target: string) => string;
		commandDeafenDescription: string;
		commandDeafenExtended: string;
		commandDeafenUnable: (target: string) => string;
		commandDeafenSuccess: (target: string, thisCase: ModerationCase) => string;
		commandBanDescription: string;
		commandBanExtended: string;
		commandBanUnable: (target: string) => string;
		commandBanSuccess: (target: string, thisCase: ModerationCase) => string;
		commandKickDescription: string;
		commandKickExtended: string;
		commandKickUnable: (target: string) => string;
		commandKickSuccess: (target: string, thisCase: ModerationCase) => string;
		commandUnbanDescription: string;
		commandUnbanExtended: string;
		commandUnbanUnable: (target: string) => string;
		commandUnbanSuccess: (target: string, thisCase: ModerationCase) => string;
		commandUnmuteDescription: string;
		commandUnmuteExtended: string;
		commandUnmuteUnable: (target: string) => string;
		commandUnmuteSuccess: (target: string, thisCase: ModerationCase) => string;
		commandUndeafenDescription: string;
		commandUndeafenExtended: string;
		commandUndeafenUnable: (target: string) => string;
		commandUndeafenSuccess: (target: string, thisCase: ModerationCase) => string;
		commandPermissionsDescription: string;
		commandPermissionsHasAll: (user: string) => string;
		commandClearroleDescription: string;
		commandClearroleExtended: string;
		commandClearroleRoleEmpty: (role: string) => string;
		commandClearrole: (size: number, role: string) => string;
		commandNicknameDescription: string;
		commandNicknameExtended: string;
		commandNicknameSet: (user: string) => string;
		commandNicknameCleared: (user: string) => string;
		commandRoleDescription: string;
		commandRoleExtended: string;
		commandRoleRemove: (roles: string) => string;
		commandRoleAdd: (roles: string) => string;
		commandLockDescription: string;
		commandLockExtended: string;
		commandLockLocked: string;
		commandUnlockDescription: string;
		commandUnlockExtended: string;
		commandUnlockUnlocked: string;
		commandSlowmodeDescription: string;
		commandSlowmodeExtended: string;
		commandSlowmodeReset: string;
		commandSlowmodeSet: (duration: string) => string;
		commandPurgeDescription: string;
		commandPurgeExtended: string;
		commandPurgePurged: (size: number) => string;
		commandRolealiasDescription: string;
		commandRolealiasExtended: string;
		commandRolealiasAlreadyexists: (alias: string) => string;
		commandRolealiasDoesnotexist: (alias: string) => string;
		commandRolealiasAdd: (alias: string, role: string) => string;
		commandRolealiasRemove: (alias: string) => string;
		commandSnippetDescription: string;
		commandSnippetExtended: string;
		commandSnippetAdd: (name: string) => string;
		commandSnippetEdit: (name: string) => string;
		commandSnippetRemove: (name: string) => string;
		commandSnippetNopermission: string;
		commandSnippetAlreadyexists: (name: string) => string;
		commandSnippetInvalid: (name: string) => string;
		commandSnippetNosnips: string;
		commandSnippetReset: string;
		commandRemindDescription: string;
		commandRemindExtended: string;
		resolverReminderLength: string;
		resolverReminderInvalid: (arg: string | number) => string;
		commandRemindCreated: (duration: string) => string;
		commandRemindCanceled: (content: string) => string;
		commandRemindNoreminders: string;
		commandReminderDisplayHidden: string;
		commandRemindViewEmbed: {
			title: string;
		};
		commandPomodoroDescription: string;
		commandPomodoroExtended: string;
		commandPomodoroUnderconstruction: string;
		commandAssignDescription: string;
		commandAssignExtended: string;
		commandAssignNoroleprovided: string;
		commandAssignNotassignable: (role: string) => string;
		commandAssignRoleAdd: (roles: string) => string;
		commandAssignRoleRemove: (roles: string) => string;
		commandAssignRoleNeedtrusted: (role: string) => string;
		commandWhoisDescription: string;
		commandWhoisExtended: string;
		commandWhoisDate: (duration: string, date: string) => string;
		commandWhoisJoinedguildHours: (hours: number, date: string) => string;
		commandWhoisEmbed: {
			fieldTitles: {
				displayName: string;
				accountCreated: string;
				joinedGuild: string;
				roles: string;
			};
			footer: (id: string) => string;
		};
		commandAvatarDescription: string;
		commandAvatarCannotdisplay: (user: string) => string;
		commandServerinfoDescription: string;
		commandServerinfoExtended: string;
		commandServerinfoEmbed: {
			fieldTitles: {
				totalMembers: string;
				bots: string;
				textChannels: string;
				voiceChannels: string;
				roles: string;
				emojis: string;
			};
			footer: (date: string, duration: string) => string;
		};
		commandRoleinfoDescription: string;
		commandRoleinfoExtended: string;
		commandRoleinfoRestricted: string;
		commandRoleinfoNomembers: string;
		commandRoleinfoToomany: string;
		commandRoleinfoEmbed: {
			description: (role: string, date: string) => string;
			fieldTitles: {
				aliases: string;
				members: (num: number) => string;
			};
			footer: (assignable: boolean) => string;
		};
		commandSetmemberlogDescription: string;
		commandSetmemberlogExtended: string;
		commandSetmemberlogSet: (channel: string) => string;
		commandSetserverlogDescription: string;
		commandSetserverlogExtended: string;
		commandSetserverlogSet: (channel: string) => string;
		commandSetreminderchannelDescription: string;
		commandSetreminderchannelExtended: string;
		commandSetreminderchannelSet: (channel: string) => string;
		commandSetadministratorroleDescription: string;
		commandSetadministratorroleExtended: string;
		commandSetadministratorroleSet: (role: string) => string;
		commandSetmoderatorroleDescription: string;
		commandSetmoderatorroleExtended: string;
		commandSetmoderatorroleSet: (role: string) => string;
		commandSettrustedroleDescription: string;
		commandSettrustedroleExtended: string;
		commandSettrustedroleSet: (role: string) => string;
		commandSetmutedroleDescription: string;
		commandSetmutedroleExtended: string;
		commandSetmutedroleSet: (role: string) => string;
		commandSetdeafenedroleDescription: string;
		commandSetdeafenedroleExtended: string;
		commandSetdeafenedroleSet: (role: string) => string;
		commandSetbandeletedaysDescription: string;
		commandSetbandeletedaysExtended: string;
		commandSetbandeletedaysSet: (days: number) => string;
		commandManagerestrictedrolesDescription: string;
		commandManagerestrictedrolesExtended: string;
		commandManagerestrictedrolesManageRemoved: (removedRoles: string) => string;
		commandManagerestrictedrolesManageAdded: (addedRoles: string) => string;
		commandManagerestrictedrolesReset: string;
		commandManagerestrictedrolesShowNoroles: string;
		commandManagerestrictedrolesShowRolenotfound: string;
		commandManageassignablerolesDescription: string;
		commandManageassignablerolesExtended: string;
		commandManageassignablerolesManageRemoved: (removedRoles: string) => string;
		commandManageassignablerolesManageAdded: (addedRoles: string) => string;
		commandManageassignablerolesReset: string;
		commandManageassignablerolesShowNoroles: string;
		commandManageassignablerolesShowRolenotfound: string;
		commandManagewordblacklistDescription: string;
		commandManagewordblacklistExtended: string;
		commandManagewordblacklistEnabled: string;
		commandManagewordblacklistDisabled: string;
		commandManagewordblacklistReset: string;
		commandManagewordblacklistUpdate: (removing: boolean) => string;
		commandToggletrustedrolerequirementDescription: string;
		commandToggletrustedrolerequirementExtended: string;
		commandToggletrustedrolerequirementDisable: string;
		commandToggletrustedrolerequirementEnable: string;
		commandSetembedcolorDescription: string;
		commandSetembedcolorExtended: string;
		resolverInvalidColor: (hex: string) => string;
		commandSetembedcolorReset: string;
		commandSetembedcolorShow: (hex: string) => string;
		commandSetembedcolorShowNone: string;
		commandSetembedcolorSet: (hex: string) => string;
		commandFeedbackDescription: string;
		commandFeedbackExtended: string;
		commandFeedbackNoGuild: string;
		commandFeedbackNoChannel: string;
		commandFeedbackSent: string;
		commandSupportDescription: string;
		commandTogglechannelcreateDescription: string;
		commandTogglechannelcreate: (disabled: boolean) => string;
		commandTogglechanneldeleteDescription: string;
		commandTogglechanneldelete: (disabled: boolean) => string;
		commandTogglechannelupdateDescription: string;
		commandTogglechannelupdateExtended: string;
		commandTogglechannelupdate: (disabled: boolean) => string;
		commandToggleemojicreateDescription: string;
		commandToggleemojicreate: (disabled: boolean) => string;
		commandToggleemojideleteDescription: string;
		commandToggleemojidelete: (disabled: boolean) => string;
		commandToggleemojiupdateDescription: string;
		commandToggleemojiupdateExtended: string;
		commandToggleemojiupdate: (disabled: boolean) => string;
		commandToggleguildbanaddDescription: string;
		commandToggleguildbanadd: (disabled: boolean) => string;
		commandToggleguildbanremoveDescription: string;
		commandToggleguildbanremove: (disabled: boolean) => string;
		commandToggleguildmemberaddDescription: string;
		commandToggleguildmemberadd: (disabled: boolean) => string;
		commandToggleguildmemberremoveDescription: string;
		commandToggleguildmemberremove: (disabled: boolean) => string;
		commandToggleguildmemberupdateDescription: string;
		commandToggleguildmemberupdateExtended: string;
		commandToggleguildmemberupdate: (disabled: boolean) => string;
		commandToggleinvitecreateDescription: string;
		commandToggleinvitecreate: (disabled: boolean) => string;
		commandToggleinvitedeleteDescription: string;
		commandToggleinvitedelete: (disabled: boolean) => string;
		commandTogglemessagedeleteDescription: string;
		commandTogglemessagedelete: (disabled: boolean) => string;
		commandTogglemessagedeletebulkDescription: string;
		commandTogglemessagedeletebulk: (disabled: boolean) => string;
		commandTogglerolecreateDescription: string;
		commandTogglerolecreate: (disabled: boolean) => string;
		commandToggleroledeleteDescription: string;
		commandToggleroledelete: (disabled: boolean) => string;
		commandToggleroleupdateDescription: string;
		commandToggleroleupdateExtended: string;
		commandToggleroleupdate: (disabled: boolean) => string;
		eventChannelcreateEmbed: {
			footer: (id: string) => string;
			title: (type: string, name: string) => string;
		};
		eventChanneldeleteEmbed: {
			footer: (id: string) => string;
			title: (type: string, name: string) => string;
		};
		eventChannelupdateNamechangeEmbed: {
			footer: (id: string) => string;
			title: (oldName: string, newName: string, type: string) => string;
		};
		eventEmojicreateEmbed: {
			footer: (id: string) => string;
			title: (name: string) => string;
		};
		eventEmojideleteEmbed: {
			footer: (id: string) => string;
			title: (name: string) => string;
		};
		eventEmojiupdateNamechangeEmbed: {
			footer: (id: string) => string;
			title: (oldName: string, newName: string, animated: boolean) => string;
		};
		eventRolecreateEmbed: {
			footer: (id: string) => string;
			title: (name: string) => string;
		};
		eventRoledeleteEmbed: {
			footer: (id: string) => string;
			title: (name: string) => string;
		};
		eventRoleupdateNamechangeEmbed: {
			footer: (id: string) => string;
			title: (oldName: string, newName: string) => string;
		};
		eventGuildmemberaddEmbed: {
			fieldTitles: {
				bot: (executor: string) => string;
				human: string;
			};
			fieldValues: {
				accountAge: (duration: string) => string;
			};
			footer: (id: string) => string;
		};
		eventGuildmemberremoveEmbed: {
			fieldTitles: {
				joinDate: (bot: boolean) => string;
				roles: string;
			};
			fieldValues: {
				joinDate: (duration: string) => string;
			};
			footer: (id: string) => string;
		};
		eventGuildmemberupdateRoleupdateEmbed: {
			footer: (id: string) => string;
			title: (type: string, role: string, executor: string) => string;
		};
		eventGuildmemberupdateRoleupdateRemovedfrom: string;
		eventGuildmemberupdateRoleupdateAddedto: string;
		eventGuildmemberupdateDisplaynamechangeEmbed: {
			fieldTitles: {
				newDisplayName: string;
			};
			footer: (id: string) => string;
		};
		eventInvitecreateEmbed: {
			footer: (code: string) => string;
			title: (channel: string) => string;
		};
		eventInvitedeleteEmbed: {
			footer: (code: string) => string;
			title: (channel: string) => string;
		};
		eventMessagedeleteUnableToDisplay: string;
		eventMessagedeleteEmbed: {
			fieldTitles: {
				channel: (name: string, parent: string) => string;
			};
			footer: (id: string, time: string) => string;
		};
		eventMessagedeletebulkEmbed: {
			footer: (id: string) => string;
			title: (size: number, name: string, parent: string) => string;
		};
		eventGuildbanaddEmbed: {
			footer: (id: string) => string;
			title: (executor: string) => string;
		};
		eventGuildbanremoveEmbed: {
			footer: (id: string) => string;
			title: (executor: string) => string;
		};
		monitorMentionspamMax: (maxMentions: number) => string;
		monitorWordblacklistFiltered: string;
		inhibitorPingprotectionRoleping: string;
		inhibitorPingprotectionEveryone: string;
		serializerColorInvalidHex: (code: string) => string;
		serializerTrustedrolesettingInvalidSetting: (setting: string) => string;
	}
}
